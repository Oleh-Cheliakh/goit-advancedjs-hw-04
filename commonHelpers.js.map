{"version":3,"file":"commonHelpers.js","sources":["../src/js/pixabayApi.js","../src/js/createMarkup.js","../src/js/slowScroll.js","../src/js/showMessage.js","../src/main.js"],"sourcesContent":["import axios from 'axios';\n\n// Give 40 photos that match search query and page number from Pixabay API\nexport default async function getPhotos(query, page) {\n  //Access key\n  const API_KEY = '42008350-fb6f0dd148ae0c7c4d4cd1d49';\n\n  //Sending get request\n  const responseAPI = await axios.get('https://pixabay.com/api/', {\n    params: {\n      key: API_KEY,\n      q: `${query}`,\n      image_type: 'photo',\n      orientation: 'horizontal',\n      safesearch: true,\n      per_page: 40,\n      page: `${page}`,\n    },\n  });\n\n  //Save data about total images find and photos info in variables\n  const { totalHits, hits } = await responseAPI.data;\n\n  //Return object with data\n  return {\n    totalHits,\n    hits,\n  };\n}\n","export default function createMarkup(data, container) {\n  //Create photo card with API response data\n  const markup = data\n    .map(\n      ({\n        webformatURL,\n        largeImageURL,\n        tags,\n        likes,\n        views,\n        comments,\n        downloads,\n      }) => {\n        return `<div class=\"photo-card\">\n          <a href=${largeImageURL}>\n            <img src=${webformatURL} alt='${tags}' loading=\"lazy\" width=\"300\" height=\"200\" />\n          </a>\n          <div class=\"info\">\n              <p class=\"info-item\">\n                <b>Likes</b>\n                ${likes}\n              </p>\n              <p class=\"info-item\">\n                <b>Views</b>\n                ${views}\n              </p>\n              <p class=\"info-item\">\n                  <b>Comments</b>\n                  ${comments}\n              </p>\n              <p class=\"info-item\">\n                  <b>Downloads</b>\n                  ${downloads}\n              </p>\n          </div>\n        </div>`;\n      }\n    )\n    .join('');\n\n  //Insert elements in the end of the gallery container in order to provide pagination\n  container.insertAdjacentHTML('beforeend', markup);\n}\n","//Scroll two rows further\nexport default function slowScroll(listContainer) {\n  const { height: cardHeight } =\n    listContainer.firstElementChild.getBoundingClientRect();\n\n  window.scrollBy({\n    top: cardHeight * 2,\n    behavior: 'smooth',\n  });\n}\n","import iziToast from 'izitoast';\nimport 'izitoast/dist/css/iziToast.min.css';\n\n// Show custom pop up with message and specific color\nexport default function showMessage(message, color) {\n  return iziToast.show({\n    message: `${message}`,\n    color: `${color}`,\n    position: 'topRight',\n    transitionIn: 'fadeInDown',\n  });\n}\n","import SimpleLightbox from 'simplelightbox';\nimport 'simplelightbox/dist/simple-lightbox.min.css';\n\nimport getPhotos from './js/pixabayApi';\nimport createMarkup from './js/createMarkup';\nimport slowScroll from './js/slowScroll';\nimport showMessage from './js/showMessage';\n\n// Pick search form, gallery and pagination element\nconst searchForm = document.querySelector('.search-form');\nconst galleryContainer = document.querySelector('.gallery');\nconst buttonLoadMore = document.querySelector('.load-more');\n\n// Set variables to store query, current page and total pages available\nlet currentPage = 0;\nlet totalPages = 0;\nlet currentQuery;\n\n// Uses ligtbox for slider component\nlet lightbox = new SimpleLightbox('.photo-card a');\n\n// Set intersaction observer for the element at the end of the galery\nlet observer = new IntersectionObserver(loadMore, {\n  // Set up how far from target viewport shold be\n  rootMargin: '0px',\n});\n\n// Clear gallery, gets input value, sends get request and create gallery\nasync function handleSubmit(event, contentContainer) {\n  // Prevent page refreshing\n  event.preventDefault();\n\n  // Delete any observers and clear gallery\n  observer.unobserve(buttonLoadMore);\n  contentContainer.innerHTML = '';\n\n  // Get search query from form\n  const formValue = new FormData(event.currentTarget);\n  let { searchQuery } = Object.fromEntries(formValue.entries());\n\n  // Clear side spaces and make query lowercase for the proper string comparison\n  searchQuery = searchQuery.trim().toLowerCase();\n\n  // Show notification if user hasn't type anything\n  if (!searchQuery) {\n    showMessage('You have to write a search query', 'yellow');\n    event.currentTarget.reset();\n    return;\n  }\n\n  // If query is new, then starts from the 1 page\n  if (currentQuery !== searchQuery) {\n    currentQuery = searchQuery;\n    currentPage = 0;\n  }\n\n  // Change page number after each search\n  currentPage += 1;\n\n  try {\n    // Sends get request to receive 40 photos\n    const { totalHits, hits } = await getPhotos(currentQuery, currentPage);\n\n    // If doesn't find photos, then shows error message\n    if (hits.length === 0) {\n      showMessage(\n        'Sorry, there are no images matching your search query. Please try again.',\n        'red'\n      );\n      return;\n    }\n\n    // Calculates total pages and shows number of photos available (only if it is first search)\n    if (currentPage == 1) {\n      totalPages = Math.ceil(totalHits / 40);\n      showMessage(`Hooray! We found ${totalHits} images.`, 'green');\n    }\n\n    // Adds photos cards to DOM\n    createMarkup(hits, galleryContainer);\n\n    // If total pages available bigger than current page, then ads infinite scroll\n    if (totalPages > currentPage) {\n      observer.observe(buttonLoadMore);\n    } else {\n      // If no more pages available then shows message\n      showMessage(\n        'Sorry, there are no more images matching your search query',\n        'yellow'\n      );\n    }\n\n    // Refresh slider component content\n    lightbox.refresh();\n  } catch (error) {\n    // Catch any errors in order to prevent full stop of application\n    console.log(error.message);\n  }\n}\n\n// Invokes handleSubmit after search button click\nsearchForm.addEventListener('submit', event => {\n  handleSubmit(event, galleryContainer, buttonLoadMore);\n});\n\n// Load next page with images after viewport reached bottom of the gallery\nfunction loadMore(entries) {\n  entries.forEach(async entry => {\n    // Checks if viewport reached observable element\n    if (entry.isIntersecting) {\n      // Increase page number for the get request\n      currentPage += 1;\n\n      // Sends get request to receive 40 photos\n      try {\n        const { hits } = await getPhotos(currentQuery, currentPage);\n\n        // Adds photos cards to the end of gallery\n        createMarkup(hits, galleryContainer);\n\n        // Refresh slider component in order to add new photos\n        lightbox.refresh();\n\n        // Scrolls two rows further\n        slowScroll(galleryContainer);\n\n        // If user reaches the end, shows error message and stops intersection observer\n        if (totalPages <= currentPage) {\n          showMessage(\n            \"We're sorry, but you've reached the end of search results.\",\n            'red'\n          );\n          observer.unobserve(buttonLoadMore);\n          return;\n        }\n      } catch (error) {\n        // Catch any errors in order to prevent full stop of application\n        console.log(error.message);\n      }\n    }\n  });\n}\n"],"names":["getPhotos","query","page","API_KEY","responseAPI","axios","totalHits","hits","createMarkup","data","container","markup","webformatURL","largeImageURL","tags","likes","views","comments","downloads","slowScroll","listContainer","cardHeight","showMessage","message","color","iziToast","searchForm","galleryContainer","buttonLoadMore","currentPage","totalPages","currentQuery","lightbox","SimpleLightbox","observer","loadMore","handleSubmit","event","contentContainer","formValue","searchQuery","error","entries","entry"],"mappings":"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"}